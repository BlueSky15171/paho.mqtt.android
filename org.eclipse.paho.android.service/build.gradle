apply plugin: "com.android.library"
apply plugin: "maven-publish"

android {
    compileSdk rootProject.ext.compileSdk

    defaultConfig {
        minSdk 21
        targetSdk 34

        testApplicationId "org.eclipse.paho.android.service.test"
    }


    useLibrary "android.test.runner"
    useLibrary "android.test.base"
    namespace "org.eclipse.paho.android.service"
    testNamespace "org.eclipse.paho.android.service.test"
    lint {
        abortOnError false
    }
}

dependencies {
    api "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${rootProject.ext.clientVersion}"
    implementation("androidx.localbroadcastmanager:localbroadcastmanager:1.1.0")
}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        doFirst {
            ext.androidJar =
                    "${android.sdkDirectory}/platforms/${android.compileSdk}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }
        title = "$name $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompileProvider
        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.links("http://d.android.com/reference/")
        exclude "**/BuildConfig.java"
        exclude "**/R.java"
    }
}

// Generate Sources Jar
task("generateSourcesJar", type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

// Generate Plain Jar Version of library (good for legacy users)
task("generateLibraryJar", type: Jar) {
    from("$buildDir/intermediates/classes/release")
}

// Generate Javadoc
task("generateJavaDocJar", type: Jar, dependsOn: (rootProject.ext.serviceVersion.endsWith("-SNAPSHOT") ? "generatedebugJavadoc" : "generatereleaseJavadoc")) {
    from("$buildDir/docs/javadoc")
    archiveClassifier.set("javadoc")
}

publishing {
    publications {
        paho(MavenPublication) {
            groupId "org.eclipse.paho"
            artifact generateSourcesJar
            artifact generateLibraryJar
            artifact generateJavaDocJar
            artifact "$buildDir/outputs/aar/" + rootProject.ext.serviceArchivesBaseName + "-" + rootProject.ext.serviceVersion + ".aar"
        }
    }
    repositories {
        if (project.hasProperty("eclipseRepoUsername")) {
            maven {
                name "eclipse"
                url "https://repo.eclipse.org/content/repositories/paho-" + (rootProject.ext.serviceVersion.endsWith("-SNAPSHOT") ? "snapshots/" : "releases/")
                credentials {
                    username eclipseRepoUsername
                    password eclipseRepoPassword
                }
            }
        } else {
            maven {
                url "$buildDir/repo"
            }
        }
    }
}
